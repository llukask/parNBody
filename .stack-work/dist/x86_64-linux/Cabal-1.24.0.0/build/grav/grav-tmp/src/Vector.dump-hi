
==================== FINAL INTERFACE ====================
2016-11-14 17:48:43.175138799 UTC

interface main@main:Vector [family instance module] 8001
  interface hash: 53f07c05acb7373e2205b672536233cf
  ABI hash: c86914e5c4a1bc2270465f6365c6676e
  export-list hash: 6aa2a87ddf9d7669d767e0e08ccee646
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 42ac80eef1bcc5641e87102a04e83c57
  sig of: Nothing
  used TH splices: False
  where
exports:
  Vector.add
  Vector.distance
  Vector.distanceSquared
  Vector.fromTuple
  Vector.scale
  Vector.sub
  Vector.toTuple
  Vector.vec2
  Vector.Vec2
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Float 469226b1bc53433e95d0167dec5d0312
import  -/  base-4.9.0.0:GHC.Generics 8e2a7658e8b966c1d29d0d5fd4129f38
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  deepseq-1.4.2.0@deepseq-1.4.2.0:Control.DeepSeq 7269db0bf259635054f0f9964b3c6fe7
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
c84915b936f2103b254bd0f7af1635c3
  $fEqVec2 :: GHC.Classes.Eq Vector.Vec2
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Vector.Vec2 Vector.$fEqVec2_$c== Vector.$fEqVec2_$c/= -}
c84915b936f2103b254bd0f7af1635c3
  $fEqVec2_$c/= :: Vector.Vec2 -> Vector.Vec2 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Vector.Vec2) (w1 :: Vector.Vec2) ->
                 case w of ww { Vector.Vec2 ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.D# ww4 ->
                 case w1 of ww5 { Vector.Vec2 ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.D# ww9 ->
                 Vector.$w$c/= ww4 ww2 ww9 ww7 } } } }) -}
c84915b936f2103b254bd0f7af1635c3
  $fEqVec2_$c== :: Vector.Vec2 -> Vector.Vec2 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Vector.Vec2) (w1 :: Vector.Vec2) ->
                 case w of ww { Vector.Vec2 ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.D# ww4 ->
                 case w1 of ww5 { Vector.Vec2 ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.D# ww9 ->
                 Vector.$w$c== ww4 ww2 ww9 ww7 } } } }) -}
c84915b936f2103b254bd0f7af1635c3
  $fGenericVec2 :: GHC.Generics.Generic Vector.Vec2
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Vector.Vec2
                  Vector.$fGenericVec2_$cfrom
                  Vector.$fGenericVec2_$cto -}
c84915b936f2103b254bd0f7af1635c3
  $fGenericVec2_$cfrom ::
    Vector.Vec2 -> GHC.Generics.Rep Vector.Vec2 x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (ds :: Vector.Vec2) ->
                 case ds of wild { Vector.Vec2 g1 g2 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double))
                    @ x
                    g1
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.N:K1[0]
                                   <GHC.Generics.R>_P <GHC.Types.Double>_R <x>_P))
                         (Sym (GHC.Generics.N:M1[0]
                                   <GHC.Generics.S>_P
                                   <'GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Types.Double>_R) <x>_N))
                    g2
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.N:K1[0]
                                   <GHC.Generics.R>_P <GHC.Types.Double>_R <x>_P))
                         (Sym (GHC.Generics.N:M1[0]
                                   <GHC.Generics.S>_P
                                   <'GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Types.Double>_R) <x>_N)))
                   `cast`
                 (Trans
                      (Sym (GHC.Generics.N:M1[0]
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "Vec2" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R GHC.Types.Double)>_R))
                      (Trans
                           (Sym (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "Vec2" "Vector" "main" 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "Vec2" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               GHC.Types.Double))>_R))
                           (Sub (Sym (Vector.Rep_Vec2[0])))) <x>_N) }) -}
c84915b936f2103b254bd0f7af1635c3
  $fGenericVec2_$cto :: GHC.Generics.Rep Vector.Vec2 x -> Vector.Vec2
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (ds :: GHC.Generics.Rep Vector.Vec2 x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Vector.Rep_Vec2[0]))
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "Vec2" "Vector" "main" 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "Vec2" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Types.Double))>_R)
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Vec2" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Types.Double)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Vector.Vec2
                   ds1
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Double>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Types.Double>_R <x>_P))
                   ds2
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Double>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Types.Double>_R <x>_P)) }) -}
5ecbde008aa0803c58e54e0ecdef7a4c
  $fNFDataVec1 ::
    Control.DeepSeq.GNFData
      (GHC.Generics.D1
         ('GHC.Generics.MetaData "Vec2" "Vector" "main" 'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Vec2" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.S1
               ('GHC.Generics.MetaSel
                  'GHC.Base.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0 GHC.Types.Double)
             GHC.Generics.:*: GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Types.Double))))
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (0, True, True)
                Vector.$fNFDataVec3
                  `cast`
                (Sym (Control.DeepSeq.N:GNFData[0]
                          <GHC.Types.*>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData "Vec2" "Vector" "main" 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Vec2" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Types.Double)
                                 GHC.Generics.:*: GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.Rec0 GHC.Types.Double)))>_N)) -}
c84915b936f2103b254bd0f7af1635c3
  $fNFDataVec2 :: Control.DeepSeq.NFData Vector.Vec2
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*H,1*H)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Vector.$fNFDataVec2_$s$dmrnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0] <Vector.Vec2>_N)) -}
c84915b936f2103b254bd0f7af1635c3
  $fNFDataVec2_$s$dmrnf :: Vector.Vec2 -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*H,1*H)>,
     Unfolding: InlineRule (-3, True, False)
                (\ (eta :: Vector.Vec2) ->
                 Vector.$fNFDataVec1
                   `cast`
                 (Control.DeepSeq.N:GNFData[0]
                      <GHC.Types.*>_N (Sym (Vector.Rep_Vec2[0])))
                   @ GHC.Prim.Any
                   (Vector.$fGenericVec2_$cfrom @ GHC.Prim.Any eta)) -}
06b79b6369dc6770eee57a311a0f392c
  $fNFDataVec3 ::
    GHC.Generics.M1
      GHC.Generics.D
      ('GHC.Generics.MetaData "Vec2" "Vector" "main" 'GHC.Types.False)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Vec2" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0 GHC.Types.Double)
          GHC.Generics.:*: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 GHC.Types.Double)))
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a1
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData "Vec2" "Vector" "main" 'GHC.Types.False)
                           (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "Vec2" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 GHC.Types.Double)
                               GHC.Generics.:*: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.Rec0 GHC.Types.Double)))
                           a1) ->
                 case x `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData "Vec2" "Vector" "main" 'GHC.Types.False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Vec2" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Types.Double)
                                    GHC.Generics.:*: GHC.Generics.S1
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.Rec0 GHC.Types.Double))>_R)
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "Vec2" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Types.Double)
                                 GHC.Generics.:*: GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.Rec0
                                                       GHC.Types.Double)>_R) <a1>_N) of wild { GHC.Generics.:*: x1 y ->
                 case x1 of tpl { DEFAULT ->
                 case y of tpl1 { DEFAULT -> GHC.Tuple.() } } }) -}
c84915b936f2103b254bd0f7af1635c3
  $fShowVec1 :: Vector.Vec2 -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Vector.Vec2) ->
                 case w of ww { Vector.Vec2 ww1 ww2 ->
                 Vector.$w$cshowsPrec 0# ww1 ww2 }) -}
c84915b936f2103b254bd0f7af1635c3
  $fShowVec2 :: GHC.Show.Show Vector.Vec2
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Vector.Vec2
                  Vector.$fShowVec2_$cshowsPrec
                  Vector.$fShowVec2_$cshow
                  Vector.$fShowVec2_$cshowList -}
c84915b936f2103b254bd0f7af1635c3
  $fShowVec2_$cshow :: Vector.Vec2 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Vector.Vec2) ->
                 Vector.$fShowVec2_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c84915b936f2103b254bd0f7af1635c3
  $fShowVec2_$cshowList :: [Vector.Vec2] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Vector.Vec2 Vector.$fShowVec1) -}
c84915b936f2103b254bd0f7af1635c3
  $fShowVec2_$cshowsPrec ::
    GHC.Types.Int -> Vector.Vec2 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Vector.Vec2) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Vector.Vec2 ww3 ww4 ->
                 Vector.$w$cshowsPrec ww1 ww3 ww4 } }) -}
55ee06f992b5053e7940094cdae719f4
  $fShowVec3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Vec2 "#) -}
d5fd80eba6f9f89886e1696e56705f67
  $fShowVec4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
f4e9c33b82c527fd989e22f1f2649c14
  $tc'Vec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Vec2"#) -}
e2d0a6ed5e94b5749f54eb2fd9503aba
  $tc'Vec2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8827181163103759545##
                   11980543549504721801##
                   Vector.$trModule
                   Vector.$tc'Vec1) -}
c0112372c5a59d014cff6fbff968b577
  $tcVec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Vec2"#) -}
58d86ef31eca0d0b5fdec85b2e3b299d
  $tcVec2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6073442731578367697##
                   10903260491632318793##
                   Vector.$trModule
                   Vector.$tcVec1) -}
fba7fc1f256d8afc7bd8f3909a7d6c08
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Vector.$trModule2
                   Vector.$trModule1) -}
01bd60a022bfefac4f10270280a64d10
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Vector"#) -}
f89ccd4be16adb04ef7cf13f7e9cc87a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
23ec1328ce8523d31138c2f40afe04e8
  $w$c/= ::
    GHC.Prim.Double#
    -> GHC.Types.Double
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: GHC.Prim.Double#)
                   (ww3 :: GHC.Types.Double) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.D# x ->
                      case ww3 of wild2 { GHC.Types.D# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
22130e4a68d4395482bc1fabef2a5b1d
  $w$c== ::
    GHC.Prim.Double#
    -> GHC.Types.Double
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: GHC.Prim.Double#)
                   (ww3 :: GHC.Types.Double) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqDouble ww1 ww3 }) -}
a5aee3b758b8d76f6392369566bcd17b
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Double -> GHC.Types.Double -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: GHC.Types.Double) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Vector.$fShowVec4
                       ww4 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Vector.$fShowVec4
                       ww4 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Vector.$fShowVec3
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Vector.$fShowVec3
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x))))) }) -}
c84915b936f2103b254bd0f7af1635c3
  axiom Rep_Vec2::
      GHC.Generics.Rep Vector.Vec2
        = GHC.Generics.D1
            ('GHC.Generics.MetaData "Vec2" "Vector" "main" 'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Vec2" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 GHC.Types.Double)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Types.Double)))
c84915b936f2103b254bd0f7af1635c3
  data Vec2 = Vec2 GHC.Types.Double GHC.Types.Double
7b1457e5caa788bca00820b08b086d2a
  add :: Vector.Vec2 -> Vector.Vec2 -> Vector.Vec2
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U))><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Vector.Vec2) (ds1 :: Vector.Vec2) ->
                 case ds of wild { Vector.Vec2 x1 y1 ->
                 case ds1 of wild1 { Vector.Vec2 x2 y2 ->
                 Vector.Vec2
                   (GHC.Float.plusDouble x1 x2)
                   (GHC.Float.plusDouble y1 y2) } }) -}
2b0190e150cd282f35e4f999b93b5f5d
  distance :: Vector.Vec2 -> Vector.Vec2 -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (v1 :: Vector.Vec2) (v2 :: Vector.Vec2) ->
                 case v1 of wild { Vector.Vec2 x1 y1 ->
                 case v2 of wild1 { Vector.Vec2 x2 y2 ->
                 case x1 of wild2 { GHC.Types.D# x ->
                 case x2 of wild3 { GHC.Types.D# y ->
                 case y1 of wild4 { GHC.Types.D# x4 ->
                 case y2 of wild5 { GHC.Types.D# y4 ->
                 let {
                   x5 :: GHC.Prim.Double# = GHC.Prim.-## x4 y4
                 } in
                 let {
                   x6 :: GHC.Prim.Double# = GHC.Prim.-## x y
                 } in
                 GHC.Types.D#
                   (GHC.Prim.sqrtDouble#
                      (GHC.Prim.+##
                         (GHC.Prim.*## x6 x6)
                         (GHC.Prim.*## x5 x5))) } } } } } }) -}
1ca723284639ae15d1b65a127a4a29db
  distanceSquared :: Vector.Vec2 -> Vector.Vec2 -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (v1 :: Vector.Vec2) (v2 :: Vector.Vec2) ->
                 case v1 of wild { Vector.Vec2 x1 y1 ->
                 case v2 of wild1 { Vector.Vec2 x2 y2 ->
                 case x1 of wild2 { GHC.Types.D# x ->
                 case x2 of wild3 { GHC.Types.D# y ->
                 case y1 of wild4 { GHC.Types.D# x4 ->
                 case y2 of wild5 { GHC.Types.D# y4 ->
                 let {
                   x5 :: GHC.Prim.Double# = GHC.Prim.-## x4 y4
                 } in
                 let {
                   x6 :: GHC.Prim.Double# = GHC.Prim.-## x y
                 } in
                 GHC.Types.D#
                   (GHC.Prim.+##
                      (GHC.Prim.*## x6 x6)
                      (GHC.Prim.*## x5 x5)) } } } } } }) -}
5a6a6aafbb11d7a2c567f6fd4906ac33
  fromTuple :: (GHC.Types.Double, GHC.Types.Double) -> Vector.Vec2
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Double, GHC.Types.Double)) ->
                 case ds of wild { (,) x y -> Vector.Vec2 x y }) -}
42eb577f5ab46fd50208335f70810a24
  scale :: GHC.Types.Double -> Vector.Vec2 -> Vector.Vec2
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U)><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: GHC.Types.Double) (ds :: Vector.Vec2) ->
                 case ds of wild { Vector.Vec2 x y ->
                 Vector.Vec2
                   (GHC.Float.timesDouble s x)
                   (GHC.Float.timesDouble s y) }) -}
71fac3c70b9584fb327070cb568a3994
  sub :: Vector.Vec2 -> Vector.Vec2 -> Vector.Vec2
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U))><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Vector.Vec2) (ds1 :: Vector.Vec2) ->
                 case ds of wild { Vector.Vec2 x1 y1 ->
                 case ds1 of wild1 { Vector.Vec2 x2 y2 ->
                 Vector.Vec2
                   (GHC.Float.minusDouble x1 x2)
                   (GHC.Float.minusDouble y1 y2) } }) -}
6e88f5c79c955b7533f0879569aa0834
  toTuple :: Vector.Vec2 -> (GHC.Types.Double, GHC.Types.Double)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Vector.Vec2) ->
                 case ds of wild { Vector.Vec2 x y -> (x, y) }) -}
387f89a0db0935689b09894a50a1eb4b
  vec2 :: GHC.Types.Double -> GHC.Types.Double -> Vector.Vec2
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True) Vector.Vec2 -}
instance [safe] GHC.Classes.Eq [Vector.Vec2] = Vector.$fEqVec2
instance [safe] GHC.Generics.Generic [Vector.Vec2]
  = Vector.$fGenericVec2
instance [safe] Control.DeepSeq.NFData [Vector.Vec2]
  = Vector.$fNFDataVec2
instance [safe] GHC.Show.Show [Vector.Vec2] = Vector.$fShowVec2
family instance GHC.Generics.Rep [Vector.Vec2] = Vector.Rep_Vec2
"SPEC/Vector $dmrnf @ Vec2" [ALWAYS] forall ($dNFData :: Control.DeepSeq.NFData
                                                           Vector.Vec2)
                                            ($dGeneric :: GHC.Generics.Generic Vector.Vec2)
                                            ($dGNFData :: Control.DeepSeq.GNFData
                                                            (GHC.Generics.Rep Vector.Vec2))
  Control.DeepSeq.$dmrnf @ Vector.Vec2 $dNFData $dGeneric $dGNFData
  = Vector.$fNFDataVec2_$s$dmrnf
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

